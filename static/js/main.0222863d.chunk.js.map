{"version":3,"sources":["box.png","components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","target","rel","src","box","width","height","alt","Component","Main","style","role","maxWidth","App","props","captureFile","event","uploadFile","description","state","a","this","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","console","log","account","loading","id","files","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,iC,+sBC0B5BC,E,4JApBX,WACI,OACI,yBAAKC,UAAU,iDACX,uBACIA,UAAU,sCACVC,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAEJ,yBAAKC,IAAKC,IAAKC,MAAM,KAAKC,OAAO,KAAKP,UAAU,YAAYQ,IAAI,KANpE,kBASA,wBAAIR,UAAU,mBACV,uBAAGA,UAAU,cAAc,a,GAf1BS,aCiBNC,E,4JAhBX,WACI,OACI,yBAAKV,UAAU,mCAAmCW,MAAO,CAAEL,MAAO,WAC9D,yBAAKN,UAAU,OACX,0BAAMY,KAAK,OAAOZ,UAAU,4BAA4BW,MAAO,CAAEE,SAAU,UACvE,yBAAKb,UAAU,WACX,mCACA,uI,GARTS,a,kBC6FJK,E,kDA3BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAtBVC,YAAc,SAAAC,KAqBK,EAhBnBC,WAAa,SAAAC,KAkBT,EAAKC,MAAQ,GAFE,E,6FA7DnB,sBAAAC,EAAA,sEACUC,KAAKC,WADf,uBAEUD,KAAKE,qBAFf,gD,mHAKA,sBAAAH,EAAA,0DAGQI,OAAOC,SAHf,uBAIQD,OAAOE,KAAO,IAAIC,IAAKH,OAAOC,UAJtC,SAKcD,OAAOC,SAASG,SAL9B,6BAMeJ,OAAOE,KACdF,OAAOE,KAAO,IAAIC,IAAKH,OAAOE,KAAKG,iBAEnCL,OAAOM,MAAM,uEATrB,2C,6HAaA,4BAAAV,EAAA,sDAEUM,EAAOF,OAAOE,KACpBK,QAAQC,IAAIN,GAHhB,2C,0EAoDA,WACI,OACI,6BACI,kBAAC,EAAD,CAAQO,QAASZ,KAAKF,MAAMc,UAExBZ,KAAKF,MAAMe,QACL,yBAAKC,GAAG,SAASpC,UAAU,oBAAmB,0CAC9C,kBAAC,EAAD,CACEqC,MAAOf,KAAKF,MAAMiB,MAClBrB,YAAaM,KAAKN,YAClBE,WAAYI,KAAKJ,kB,GAjF3BT,aCIE6B,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0222863d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/box.df8b84d5.png\";","import React, { Component } from 'react';\n// import Identicon from 'identicon.js';\nimport box from '../box.png'\n\nclass Navbar extends Component {\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\n                <a\n                    className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n                    href=\"https://www.linkedin.com/in/ibrahimbs/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\n                    INSPIRE AGENCY\n                </a>\n                <ul className=\"navbar-nav px-3\">\n                    <b className='text-white'>{'0x0'}</b>\n                </ul>\n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n// import { convertBytes } from './helpers';\n// import moment from 'moment';\n\nclass Main extends Component {\n    render() {\n        return (\n            <div className=\"container-fluid mt-5 text-center\" style={{ width: '1248px' }}>\n                <div className=\"row\">\n                    <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '900px' }}>\n                        <div className=\"content\">\n                            <p>&nbsp;</p>\n                            <h1>A decentralized solution for storing our clients' documents in a secure and transparent manner.</h1>\n                        </div>\n                    </main>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\n// import './App.css';\n\n//Declare IPFS\n\nclass App extends Component {\n    async componentWillMount() {\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n\n    async loadWeb3() {\n        // Setting up Web3\n        // This code basically takes our connection from MetaMask and puts it in the Application\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider)\n        } else {\n            window.alert('Non-Ethereum Browser Detected. You should consider trying MetaMask!')\n        }\n    }\n\n    async loadBlockchainData() {\n        //Declare Web3\n        const web3 = window.web3\n        console.log(web3)\n\n        //Load account\n\n        //Network ID\n\n        //IF got connection, get data from contracts\n        //Assign contract\n\n        //Get files amount\n\n        //Load files&sort by the newest\n\n        //Else\n        //alert Error\n\n    }\n\n    // Get file from user\n    captureFile = event => {\n    }\n\n\n    //Upload File\n    uploadFile = description => {\n\n        //Add file to the IPFS\n\n        //Check If error\n        //Return error\n\n        //Set state to loading\n\n        //Assign value for the file without extension\n\n        //Call smart contract uploadFile function \n\n    }\n\n    // Setting States\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n        // Bind Functions\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar account={this.state.account} />\n                {\n                    this.state.loading\n                        ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n                        : <Main\n                            files={this.state.files}\n                            captureFile={this.captureFile}\n                            uploadFile={this.uploadFile}\n                        />\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}